package cn.icodening.console.monitor.sql;

import cn.icodening.console.monitor.sql.define.StatementInfo;
import cn.icodening.console.monitor.sql.filter.ProxyFilterManager;

import java.sql.*;

/**
 * @author icodening
 * @date 2021.07.29
 */
public class ConnectionProxy extends ConnectionProxyAdapter {

    public ConnectionProxy(Connection connection) {
        super(connection);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        SQLFilterChain<PreparedStatement> filterChain = ProxyFilterManager.getFilterChain(PreparedStatement.class);
        PreparedStatement preparedStatement = filterChain.filter(super.prepareStatement(sql));
        postPreparedStatement(preparedStatement, sql);
        return preparedStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        SQLFilterChain<PreparedStatement> filterChain = ProxyFilterManager.getFilterChain(PreparedStatement.class);
        PreparedStatement preparedStatement = filterChain.filter(super.prepareStatement(sql, resultSetType, resultSetConcurrency));
        postPreparedStatement(preparedStatement, sql);
        return preparedStatement;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return super.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        SQLFilterChain<PreparedStatement> filterChain = ProxyFilterManager.getFilterChain(PreparedStatement.class);
        PreparedStatement preparedStatement = filterChain.filter(super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
        postPreparedStatement(preparedStatement, sql);
        return preparedStatement;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return super.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        SQLFilterChain<PreparedStatement> filterChain = ProxyFilterManager.getFilterChain(PreparedStatement.class);
        PreparedStatement preparedStatement = filterChain.filter(super.prepareStatement(sql, autoGeneratedKeys));
        postPreparedStatement(preparedStatement, sql);
        return preparedStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        SQLFilterChain<PreparedStatement> filterChain = ProxyFilterManager.getFilterChain(PreparedStatement.class);
        PreparedStatement preparedStatement = filterChain.filter(super.prepareStatement(sql, columnIndexes));
        postPreparedStatement(preparedStatement, sql);
        return preparedStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        SQLFilterChain<PreparedStatement> filterChain = ProxyFilterManager.getFilterChain(PreparedStatement.class);
        PreparedStatement preparedStatement = filterChain.filter(super.prepareStatement(sql, columnNames));
        postPreparedStatement(preparedStatement, sql);
        return preparedStatement;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return super.createStatement();
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return super.prepareCall(sql);
    }

    @Override
    public void close() throws SQLException {
        super.close();
    }

    private void postPreparedStatement(PreparedStatement preparedStatement, String sql) {
        if (preparedStatement instanceof ProxyInstance) {
            StatementInfo statementInfo = new StatementInfo();
            statementInfo.setSql(sql);
            ((ProxyInstance) preparedStatement).setDynamicField(statementInfo);
        }
        if (preparedStatement instanceof PreparedStatementProxy) {
            ((PreparedStatementProxy) preparedStatement).setConnectionProxy(this);
        }
    }

}
